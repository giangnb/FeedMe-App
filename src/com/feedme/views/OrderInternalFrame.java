package com.feedme.views;

import com.feedme.Global;
import com.feedme.process.CartProcess;
import com.feedme.process.OrderInternalProcess;
import com.feedme.service.Product;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author BHT
 */
public class OrderInternalFrame extends javax.swing.JDialog {

    public static CartProcess cart;
    private static boolean isSelectedFood;
    private static Product product;
   

    /**
     * Creates new form OrderInternalFrame
     */
    // private DefaultTableModel model;
    public OrderInternalFrame() {
        Global.CART_GLOBAL = new CartProcess();

        initComponents();
        Global.PRODBYCATEG_TABLE_MODEL = (DefaultTableModel) tblProductInternal.getModel();
        initCategModel();
        setLocationRelativeTo(null);
        setModal(true);
        lblSelectProduct.setText("");
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductInternal = new org.jdesktop.swingx.JXTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        lblSelectProduct = new javax.swing.JLabel();
        btnSumit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCategoryName = new org.jdesktop.swingx.JXList();

        tblProductInternal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null,  new Boolean(false), null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Món ăn", "Giá", "Chọn", "SL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProductInternal.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tblProductInternal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductInternalMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProductInternal);

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/feedme/img/plus.png"))); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/feedme/img/substract.png"))); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        lblSelectProduct.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblSelectProduct.setText("Chọn thêm {{sp}} sản phẩm");

        btnSumit.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnSumit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/feedme/img/check.png"))); // NOI18N
        btnSumit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSumitActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/feedme/img/abort.png"))); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        listCategoryName.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Đang ", "Cập Nhật ", "Đơn Hàng", " ........." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listCategoryName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        listCategoryName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listCategoryNameMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listCategoryName);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblSelectProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel)
                        .addGap(54, 54, 54)
                        .addComponent(btnSumit)))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancel)
                        .addComponent(btnSumit))
                    .addComponent(lblSelectProduct))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSumitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSumitActionPerformed

        //Global.DISCOUNT_VALUE = cart.total;
        //Global.CART_GLOBAL = cart;
        //JOptionPane.showMessageDialog(null, cart.total);
        //new OrderPanel().loadOrderTable();
        this.dispose();

    }//GEN-LAST:event_btnSumitActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed

        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int sl = getNumberOfFoods();
        Global.PRODBYCATEG_TABLE_MODEL.setValueAt(sl -= 1, 0, 3);
        if (sl == 0) {
            btnRemove.setEnabled(false);
        } else {
            lblSelectProduct.setText("Chọn " + sl + " Sản Phẩm");
            cart.pop(product);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void listCategoryNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listCategoryNameMouseClicked

        String categoryName = "";
        categoryName = getCategNamefromList();
        initProdTableModel(categoryName);
    }//GEN-LAST:event_listCategoryNameMouseClicked

    private void tblProductInternalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductInternalMouseClicked
        // TODO add your handling code here:
        isSelectedFood = (boolean) Global.PRODBYCATEG_TABLE_MODEL.getValueAt(0, 2);
        product = OrderInternalProcess.getProductByName((String) Global.PRODBYCATEG_TABLE_MODEL.getValueAt(0, 0));

    }//GEN-LAST:event_tblProductInternalMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:

        btnRemove.setEnabled(true);
        if (isSelectedFood) {
            Global.CART_GLOBAL.put(product);
            Global.PRODBYCATEG_TABLE_MODEL.setValueAt(Global.CART_GLOBAL.getQuantityOfProduct(product), 0, 3);
            lblSelectProduct.setText("Chọn " + Global.CART_GLOBAL.getTotalQuantity() + " Sản Phẩm");
            JOptionPane.showMessageDialog(null, "Cart Length " + Global.CART_GLOBAL.total);

        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn sản phẩm trước");
        }
//        if (isSelectedFood) {
//            int sl = getNumberOfFoods();
//            Global.PRODBYCATEG_TABLE_MODEL.setValueAt(sl += 1, 0, 3);
//            lblSelectProduct.setText("Chọn " + sl + " Sản Phẩm");
//            temp_prod.add(product);
//            JOptionPane.showMessageDialog(null, "List Size " + temp_prod.size());
//            cart.importProductsList(temp_prod);
//            JOptionPane.showMessageDialog(null, "Cart Length " + cart.total);
//
//        } else {
//            JOptionPane.showMessageDialog(null, "Vui lòng chọn sản phẩm trước");
//        }
    }//GEN-LAST:event_btnAddActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSumit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblSelectProduct;
    private org.jdesktop.swingx.JXList listCategoryName;
    private org.jdesktop.swingx.JXTable tblProductInternal;
    // End of variables declaration//GEN-END:variables

    private String getCategNamefromList() {
        return listCategoryName.getSelectedValue().toString();
    }

    private void initCategModel() {
        new Thread(() -> {
            DefaultListModel listModel = OrderInternalProcess.initCategoryNameListModel();
            listCategoryName.setModel(listModel);
        }).start();
    }

    private void initProdTableModel(String categoryName) {
        new Thread(() -> {
            Global.PRODBYCATEG_TABLE_MODEL.setNumRows(0);
            Global.PRODBYCATEG_TABLE_MODEL.addRow(OrderInternalProcess.loadProductByCategoryObject(categoryName));
        }).start();
    }

    private static boolean isSelectedProduct() {
        boolean isSelected = (boolean) Global.PRODBYCATEG_TABLE_MODEL.getValueAt(0, 2);
        return isSelected;
    }

    private int getNumberOfFoods() {
        int numOfFoods = Integer.parseInt(Global.PRODBYCATEG_TABLE_MODEL.getValueAt(0, 3).toString());
        return numOfFoods;
    }

    private void getSelectFoodinOrderInternal(boolean IS_SELECTED_PRODUCT) {
        for (int i = 0; i < Global.PRODBYCATEG_TABLE_MODEL.getRowCount(); i++) {
            if (isSelectedProduct()) {
                Global.ORDERPROD_TABLE_MODEL = Global.PRODBYCATEG_TABLE_MODEL;
            }
        }

    }

}
